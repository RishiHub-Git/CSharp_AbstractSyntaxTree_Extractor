{
  "Namespaces": [
    {
      "Name": "Default NameSpace",
      "Classes": [
        {
          "Name": "ValidationBehaviour",
          "Access_Modifier": "public",
          "Is_Class_Static": false,
          "XMLComment": "",
          "Comment": "",
          "Methods": [
            {
              "XMLComment": "",
              "Comment": "",
              "Name": "Handle",
              "Access_Modifier": "public",
              "Is_Method_Static": false,
              "Parameters": "TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken",
              "ReturnType": "Task<TResponse>",
              "Body": "{\n        if (_validators.Any())\n        {\n            var context = new ValidationContext<TRequest>(request);\n\n            var validationResults = await Task.WhenAll(\n                _validators.Select(v =>\n                    v.ValidateAsync(context, cancellationToken)));\n\n            var failures = validationResults\n                .Where(r => r.Errors.Any())\n                .SelectMany(r => r.Errors)\n                .ToList();\n\n            if (failures.Any())\n                throw new ValidationException(failures);\n        }\n        return await next();\n    }"
            }
          ],
          "Constructors": [
            {
              "Name": "ValidationBehaviour",
              "Access_Modifier": "public",
              "Body": "{\n        _validators = validators;\n    }",
              "Parameters": "IEnumerable<IValidator<TRequest>> validators"
            }
          ],
          "Fields": [
            {
              "Name": "_validators",
              "FieldType": "IEnumerable<IValidator<TRequest>>",
              "Access_Modifier": "private",
              "IsReadonly": true
            }
          ],
          "Properties": []
        }
      ]
    }
  ]
}